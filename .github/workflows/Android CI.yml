name: Android CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  build-and-test:
    name: Build & Test on API ${{ matrix.api-level }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        api-level: [29, 34, 35]

    env:
      ANDROID_SDK_ROOT: $HOME/android-sdk
      JAVA_HOME: /usr/lib/jvm/adoptopenjdk-17-hotspot
      PATH: ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest/bin:${{ env.PATH }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install Android SDK Command-line Tools
        run: |
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
          cd $ANDROID_SDK_ROOT/cmdline-tools
          curl -fsSL "https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip" -o commandlinetools.zip
          unzip -q commandlinetools.zip -d temp
          mkdir -p latest
          mv temp/cmdline-tools/* latest/
          rm -rf temp commandlinetools.zip
        shell: bash

      - name: Install SDK packages for API ${{ matrix.api-level }}
        run: |
          yes | sdkmanager --sdk_root=${ANDROID_SDK_ROOT} \
            "platforms;android-${{ matrix.api-level }}" \
            "system-images;android-${{ matrix.api-level }};google_apis;x86_64" \
            "build-tools;34.0.0" \
            "platform-tools" \
            "emulator"
        shell: bash

      - name: Accept Android SDK licenses
        run: |
          yes | sdkmanager --sdk_root=${ANDROID_SDK_ROOT} --licenses
        shell: bash

      - name: Assemble Debug APK
        run: ./gradlew assembleDebug --stacktrace

      - name: Run unit tests
        run: ./gradlew testDebugUnitTest --stacktrace

      - name: Run instrumentation tests on API ${{ matrix.api-level }}
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: google_apis
          arch: x86_64
          emulator-options: -no-window -no-audio -no-snapshot
          script: ./gradlew connectedDebugAndroidTest

      - name: Upload debug APK
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: apk-api-${{ matrix.api-level }}
          path: app/build/outputs/apk/debug/app-debug.apk
